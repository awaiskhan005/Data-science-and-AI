{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNTaljbQnH4YA2IAf0+YTIY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/awaiskhan005/Data-science-and-AI/blob/main/numpy.pratice\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JBHIHUyOUHSW",
        "outputId": "718c4119-b639-4b24-9b7a-f61f396c6e76"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1. 2. 3.]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "A = [1.0, 2.0, 3.0]\n",
        "a = np.array(A)\n",
        "print(a)"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "oiEoD0zutjx8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mVpo9LjwtkrD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(a.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7kCWnD4dUwSL",
        "outputId": "f28142d2-cd38-4892-e8eb-b43a0a5350e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(3,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(a.dtype)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KIYLomjoU0YB",
        "outputId": "6a7bbd12-17f6-4daf-f89b-7e0309683e8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# create empty array\n",
        "import numpy as np\n",
        "a = np.empty([3,3])\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RMQP3KUtVB7l",
        "outputId": "d1f272a5-b0bd-4b3c-a56b-b16e090e5535"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[4.92349737e-310 0.00000000e+000 0.00000000e+000]\n",
            " [0.00000000e+000 0.00000000e+000 0.00000000e+000]\n",
            " [0.00000000e+000 0.00000000e+000 0.00000000e+000]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# creste zero array\n",
        "import numpy as np\n",
        "a = np.zeros([3,5])\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NNowQfHdVk0r",
        "outputId": "99c8112d-dc5c-464e-b49c-a9dca7ddacff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# create ones arry\n",
        "import numpy as np\n",
        "a = np.ones([3,5])\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qEIVXLyWWLZz",
        "outputId": "e5b98b12-40f8-4bd2-c0f8-25f60e9e969d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1.]\n",
            " [1. 1. 1. 1. 1.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create array with vstack\n",
        "from numpy import array\n",
        "from numpy import vstack\n",
        "# Create first array\n",
        "a = array ([1,2,3])\n",
        "print(a)\n",
        "# create second array\n",
        "b= array([4,5,6])\n",
        "print(b)\n",
        "# create third array\n",
        "c= vstack([a,b])\n",
        "print(c)\n",
        "# size of the array\n",
        "print(c.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rbHYitLnWvUv",
        "outputId": "34e2d306-2ad0-4ec2-a530-e988dc22dd64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3]\n",
            "[4 5 6]\n",
            "[[1 2 3]\n",
            " [4 5 6]]\n",
            "(2, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Create array with hstack\n",
        "from numpy import array\n",
        "from numpy import hstack\n",
        "# create first array\n",
        "a= array([1,2,3])\n",
        "# display array\n",
        "print(a)\n",
        "# create second array\n",
        "b= array([4,5,6])\n",
        "# display array\n",
        "print(b)\n",
        "# create third array\n",
        "c = hstack([a,b])\n",
        "# display\n",
        "print(c)\n",
        "# size of array\n",
        "print(c.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-1m-fdAHZLZV",
        "outputId": "12e72b18-6cb6-4420-be2a-16976a0e9402"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3]\n",
            "[4 5 6]\n",
            "[1 2 3 4 5 6]\n",
            "(6,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "PWlUZtBmtmzo"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pip install ucimlrepo"
      ],
      "metadata": {
        "id": "AKvRWFoUG0A6",
        "outputId": "0db7bfde-3e29-4ea8-80dc-b18ee57ed04d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting ucimlrepo\n",
            "  Downloading ucimlrepo-0.0.3-py3-none-any.whl (7.0 kB)\n",
            "Installing collected packages: ucimlrepo\n",
            "Successfully installed ucimlrepo-0.0.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from ucimlrepo import fetch_ucirepo\n",
        "\n",
        "# fetch dataset\n",
        "df= fetch_ucirepo(id=545)\n",
        "df\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "JWnxAC8KG32X",
        "outputId": "d4a25c3a-f625-44e4-81fb-c3c3379c5b6c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'data': {'ids': None,\n",
              "  'features':        Area   Perimeter  Major_Axis_Length  Minor_Axis_Length  Eccentricity  \\\n",
              "  0     15231  525.578979         229.749878          85.093788      0.928882   \n",
              "  1     14656  494.311005         206.020065          91.730972      0.895405   \n",
              "  2     14634  501.122009         214.106781          87.768288      0.912118   \n",
              "  3     13176  458.342987         193.337387          87.448395      0.891861   \n",
              "  4     14688  507.166992         211.743378          89.312454      0.906691   \n",
              "  ...     ...         ...                ...                ...           ...   \n",
              "  3805  11441  415.858002         170.486771          85.756592      0.864280   \n",
              "  3806  11625  421.390015         167.714798          89.462570      0.845850   \n",
              "  3807  12437  442.498993         183.572922          86.801979      0.881144   \n",
              "  3808   9882  392.296997         161.193985          78.210480      0.874406   \n",
              "  3809  11434  404.709992         161.079269          90.868195      0.825692   \n",
              "  \n",
              "        Convex_Area    Extent  \n",
              "  0           15617  0.572896  \n",
              "  1           15072  0.615436  \n",
              "  2           14954  0.693259  \n",
              "  3           13368  0.640669  \n",
              "  4           15262  0.646024  \n",
              "  ...           ...       ...  \n",
              "  3805        11628  0.681012  \n",
              "  3806        11904  0.694279  \n",
              "  3807        12645  0.626739  \n",
              "  3808        10097  0.659064  \n",
              "  3809        11591  0.802949  \n",
              "  \n",
              "  [3810 rows x 7 columns],\n",
              "  'targets':          Class\n",
              "  0       Cammeo\n",
              "  1       Cammeo\n",
              "  2       Cammeo\n",
              "  3       Cammeo\n",
              "  4       Cammeo\n",
              "  ...        ...\n",
              "  3805  Osmancik\n",
              "  3806  Osmancik\n",
              "  3807  Osmancik\n",
              "  3808  Osmancik\n",
              "  3809  Osmancik\n",
              "  \n",
              "  [3810 rows x 1 columns],\n",
              "  'original':        Area   Perimeter  Major_Axis_Length  Minor_Axis_Length  Eccentricity  \\\n",
              "  0     15231  525.578979         229.749878          85.093788      0.928882   \n",
              "  1     14656  494.311005         206.020065          91.730972      0.895405   \n",
              "  2     14634  501.122009         214.106781          87.768288      0.912118   \n",
              "  3     13176  458.342987         193.337387          87.448395      0.891861   \n",
              "  4     14688  507.166992         211.743378          89.312454      0.906691   \n",
              "  ...     ...         ...                ...                ...           ...   \n",
              "  3805  11441  415.858002         170.486771          85.756592      0.864280   \n",
              "  3806  11625  421.390015         167.714798          89.462570      0.845850   \n",
              "  3807  12437  442.498993         183.572922          86.801979      0.881144   \n",
              "  3808   9882  392.296997         161.193985          78.210480      0.874406   \n",
              "  3809  11434  404.709992         161.079269          90.868195      0.825692   \n",
              "  \n",
              "        Convex_Area    Extent     Class  \n",
              "  0           15617  0.572896    Cammeo  \n",
              "  1           15072  0.615436    Cammeo  \n",
              "  2           14954  0.693259    Cammeo  \n",
              "  3           13368  0.640669    Cammeo  \n",
              "  4           15262  0.646024    Cammeo  \n",
              "  ...           ...       ...       ...  \n",
              "  3805        11628  0.681012  Osmancik  \n",
              "  3806        11904  0.694279  Osmancik  \n",
              "  3807        12645  0.626739  Osmancik  \n",
              "  3808        10097  0.659064  Osmancik  \n",
              "  3809        11591  0.802949  Osmancik  \n",
              "  \n",
              "  [3810 rows x 8 columns],\n",
              "  'headers': Index(['Area', 'Perimeter', 'Major_Axis_Length', 'Minor_Axis_Length',\n",
              "         'Eccentricity', 'Convex_Area', 'Extent', 'Class'],\n",
              "        dtype='object')},\n",
              " 'metadata': {'uci_id': 545,\n",
              "  'name': 'Rice (Cammeo and Osmancik)',\n",
              "  'repository_url': 'https://archive.ics.uci.edu/dataset/545/rice+cammeo+and+osmancik',\n",
              "  'data_url': 'https://archive.ics.uci.edu/static/public/545/data.csv',\n",
              "  'abstract': \"A total of 3810 rice grain's images were taken for the two species, processed and feature inferences were made. 7 morphological features were obtained for each grain of rice.\",\n",
              "  'area': 'Biology',\n",
              "  'tasks': ['Classification'],\n",
              "  'characteristics': ['Multivariate'],\n",
              "  'num_instances': 3810,\n",
              "  'num_features': 7,\n",
              "  'feature_types': ['Real'],\n",
              "  'demographics': [],\n",
              "  'target_col': ['Class'],\n",
              "  'index_col': None,\n",
              "  'has_missing_values': 'no',\n",
              "  'missing_values_symbol': None,\n",
              "  'year_of_dataset_creation': 2019,\n",
              "  'last_updated': 'Fri Nov 03 2023',\n",
              "  'dataset_doi': '10.24432/C5MW4Z',\n",
              "  'creators': [],\n",
              "  'intro_paper': {'title': 'Classification of Rice Varieties Using Artificial Intelligence Methods',\n",
              "   'authors': 'Ilkay Cinar, M. Koklu',\n",
              "   'published_in': 'International Journal of Intelligent Systems and Applications in Engineering',\n",
              "   'year': 2019,\n",
              "   'url': 'https://www.semanticscholar.org/paper/4e508bb906c8fdc04ead6f20bd8918fcb3605d1c',\n",
              "   'doi': '10.18201/ijisae.2019355381'},\n",
              "  'additional_info': {'summary': \"Among  the certified rice grown in TURKEY,  the  Osmancik species, which has a large planting area since 1997 and the Cammeo species grown since 2014 have been selected for the study.  When  looking  at  the  general  characteristics  of  Osmancik species, they have a wide, long, glassy and dull appearance.  When looking at the general characteristics of the Cammeo species, they have wide and long, glassy and dull in appearance.  A total of 3810 rice grain's images were taken for the two species, processed and feature inferences were made. 7 morphological features were obtained for each grain of rice. \",\n",
              "   'purpose': None,\n",
              "   'funded_by': None,\n",
              "   'instances_represent': None,\n",
              "   'recommended_data_splits': None,\n",
              "   'sensitive_data': None,\n",
              "   'preprocessing_description': None,\n",
              "   'variable_info': '1.) Area: Returns  the  number  of  pixels  within  the boundaries of the rice grain.\\r\\n2.) Perimeter: Calculates the circumference by calculating  the  distance  between  pixels around the boundaries of the rice grain.\\r\\n3.) Major Axis Length: The longest line that can be drawn on the rice  grain,  i.e.  the  main  axis  distance, gives.\\r\\n4.) Minor Axis Length: The shortest line that can be drawn on the rice  grain,  i.e.  the  small  axis  distance, gives.\\r\\n5.) Eccentricity: It measures how round the ellipse, which has  the  same  moments  as  the  rice  grain, is.\\r\\n6.) Convex Area: Returns  the  pixel  count  of  the  smallest convex shell of the region formed by the rice grain.\\r\\n7.) Extent: Returns the ratio of the regionformed by the rice grain to the bounding box pixels.\\r\\n8.) Class: Cammeo and Osmancik rices',\n",
              "   'citation': None}},\n",
              " 'variables':                 name     role        type demographic  \\\n",
              " 0               Area  Feature     Integer        None   \n",
              " 1          Perimeter  Feature  Continuous        None   \n",
              " 2  Major_Axis_Length  Feature  Continuous        None   \n",
              " 3  Minor_Axis_Length  Feature  Continuous        None   \n",
              " 4       Eccentricity  Feature  Continuous        None   \n",
              " 5        Convex_Area  Feature     Integer        None   \n",
              " 6             Extent  Feature  Continuous        None   \n",
              " 7              Class   Target      Binary        None   \n",
              " \n",
              "                                          description units missing_values  \n",
              " 0  Returns the number of pixels within the bounda...    px             no  \n",
              " 1  Calculates the circumference by calculating th...    px             no  \n",
              " 2  The longest line that can be drawn on the rice...  None             no  \n",
              " 3  The shortest line that can be drawn on the ric...  None             no  \n",
              " 4  It measures how round the ellipse, which has t...  None             no  \n",
              " 5  Returns the pixel count of the smallest convex...  None             no  \n",
              " 6  Returns the ratio of the region formed by the ...  None             no  \n",
              " 7                                Cammeo and Osmancik  None             no  }"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# metadata\n",
        "print(rice_cammeo_and_osmancik.metadata)\n",
        "\n",
        "# variable information\n",
        "print(rice_cammeo_and_osmancik.variables)"
      ],
      "metadata": {
        "id": "hMMFJuD_HuQl",
        "outputId": "5af92274-9e39-484a-ac6a-a776c8544211",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'uci_id': 545, 'name': 'Rice (Cammeo and Osmancik)', 'repository_url': 'https://archive.ics.uci.edu/dataset/545/rice+cammeo+and+osmancik', 'data_url': 'https://archive.ics.uci.edu/static/public/545/data.csv', 'abstract': \"A total of 3810 rice grain's images were taken for the two species, processed and feature inferences were made. 7 morphological features were obtained for each grain of rice.\", 'area': 'Biology', 'tasks': ['Classification'], 'characteristics': ['Multivariate'], 'num_instances': 3810, 'num_features': 7, 'feature_types': ['Real'], 'demographics': [], 'target_col': ['Class'], 'index_col': None, 'has_missing_values': 'no', 'missing_values_symbol': None, 'year_of_dataset_creation': 2019, 'last_updated': 'Fri Nov 03 2023', 'dataset_doi': '10.24432/C5MW4Z', 'creators': [], 'intro_paper': {'title': 'Classification of Rice Varieties Using Artificial Intelligence Methods', 'authors': 'Ilkay Cinar, M. Koklu', 'published_in': 'International Journal of Intelligent Systems and Applications in Engineering', 'year': 2019, 'url': 'https://www.semanticscholar.org/paper/4e508bb906c8fdc04ead6f20bd8918fcb3605d1c', 'doi': '10.18201/ijisae.2019355381'}, 'additional_info': {'summary': \"Among  the certified rice grown in TURKEY,  the  Osmancik species, which has a large planting area since 1997 and the Cammeo species grown since 2014 have been selected for the study.  When  looking  at  the  general  characteristics  of  Osmancik species, they have a wide, long, glassy and dull appearance.  When looking at the general characteristics of the Cammeo species, they have wide and long, glassy and dull in appearance.  A total of 3810 rice grain's images were taken for the two species, processed and feature inferences were made. 7 morphological features were obtained for each grain of rice. \", 'purpose': None, 'funded_by': None, 'instances_represent': None, 'recommended_data_splits': None, 'sensitive_data': None, 'preprocessing_description': None, 'variable_info': '1.) Area: Returns  the  number  of  pixels  within  the boundaries of the rice grain.\\r\\n2.) Perimeter: Calculates the circumference by calculating  the  distance  between  pixels around the boundaries of the rice grain.\\r\\n3.) Major Axis Length: The longest line that can be drawn on the rice  grain,  i.e.  the  main  axis  distance, gives.\\r\\n4.) Minor Axis Length: The shortest line that can be drawn on the rice  grain,  i.e.  the  small  axis  distance, gives.\\r\\n5.) Eccentricity: It measures how round the ellipse, which has  the  same  moments  as  the  rice  grain, is.\\r\\n6.) Convex Area: Returns  the  pixel  count  of  the  smallest convex shell of the region formed by the rice grain.\\r\\n7.) Extent: Returns the ratio of the regionformed by the rice grain to the bounding box pixels.\\r\\n8.) Class: Cammeo and Osmancik rices', 'citation': None}}\n",
            "                name     role        type demographic  \\\n",
            "0               Area  Feature     Integer        None   \n",
            "1          Perimeter  Feature  Continuous        None   \n",
            "2  Major_Axis_Length  Feature  Continuous        None   \n",
            "3  Minor_Axis_Length  Feature  Continuous        None   \n",
            "4       Eccentricity  Feature  Continuous        None   \n",
            "5        Convex_Area  Feature     Integer        None   \n",
            "6             Extent  Feature  Continuous        None   \n",
            "7              Class   Target      Binary        None   \n",
            "\n",
            "                                         description units missing_values  \n",
            "0  Returns the number of pixels within the bounda...    px             no  \n",
            "1  Calculates the circumference by calculating th...    px             no  \n",
            "2  The longest line that can be drawn on the rice...  None             no  \n",
            "3  The shortest line that can be drawn on the ric...  None             no  \n",
            "4  It measures how round the ellipse, which has t...  None             no  \n",
            "5  Returns the pixel count of the smallest convex...  None             no  \n",
            "6  Returns the ratio of the region formed by the ...  None             no  \n",
            "7                                Cammeo and Osmancik  None             no  \n"
          ]
        }
      ]
    }
  ]
}